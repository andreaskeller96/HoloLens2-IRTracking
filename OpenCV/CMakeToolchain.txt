# toolchain-arm64-vs2022.cmake

# Use Visual Studio 2022
set(CMAKE_SYSTEM_NAME Windows)
set(CMAKE_SYSTEM_VERSION 17) # Visual Studio 2022
set(CMAKE_SYSTEM_PROCESSOR ARM64)

# Visual Studio installation path
set(VS_INSTALL_PATH "C:/Program Files/Microsoft Visual Studio/2022/Community")

# Set the C and C++ compilers (Clang/LLVM could be an alternative)
set(CMAKE_C_COMPILER "${VS_INSTALL_PATH}/VC/Tools/MSVC/14.38.33130/bin/Hostx64/arm64/cl.exe")
set(CMAKE_CXX_COMPILER "${VS_INSTALL_PATH}/VC/Tools/MSVC/14.38.33130/bin/Hostx64/arm64/cl.exe")

# Set the path to the Windows SDK (specify version as needed)
set(CMAKE_SYSROOT "C:/Program Files (x86)/Windows Kits/10")

# Optional: Set the platform toolset and Windows SDK version
# set(CMAKE_GENERATOR_TOOLSET "v143" CACHE STRING "Platform Toolset" FORCE)
# set(CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION "{windows_sdk_version}" CACHE STRING "Windows SDK Version" FORCE)

# Adjust the binary and library output paths, if necessary
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/build/bin")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/build/lib")

# Additional flags, if needed
# Note: MSVC flags can be different from GCC/Clang flags
# set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /your-c-flags-here")
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /your-cxx-flags-here")